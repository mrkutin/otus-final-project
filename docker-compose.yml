version: '3'

services:
  redis:
    image: redis/redis-stack
    restart: unless-stopped
    ports:
      - 6379:6379
      - 8001:8001
    environment:
      REDIS_ARGS: --save 60 1 --notify-keyspace-events KEA
    networks:
      - app-tier

  kafka:
    image: 'bitnami/kafka:latest'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@<your_host>:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    ports:
      - 9092:9092
      - 9094:9094
    networks:
      - app-tier

  auth:
    depends_on:
      - redis
    build:
      context: ./services/auth
    image: auth
    restart: on-failure
    deploy:
      mode: replicated
      replicas: 2
    environment:
      REDIS_HOST: redis
    networks:
      - app-tier

  license:
    depends_on:
      - redis
    build:
      context: ./services/license
    image: license
    restart: on-failure
    deploy:
      mode: replicated
      replicas: 2
    environment:
      REDIS_HOST: redis
    networks:
      - app-tier

  nginx-one:
    depends_on:
      - auth
      - license
    image: nginx:latest
    ports:
      - 8080:80
    volumes:
      - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - app-tier

  nginx-two:
    depends_on:
      - auth
      - license
    image: nginx:latest
    ports:
      - 8081:80
    volumes:
      - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - app-tier


  outbox:
    depends_on:
      - redis
      - kafka
    build:
      context: ./services/outbox
    image: outbox
    restart: on-failure
    deploy:
      mode: replicated
      replicas:
        2
    environment:
      REDIS_HOST: redis
      KAFKA_HOST: kafka
    networks:
      - app-tier

  mysql:
    image: 'bitnami/mysql:latest'
    environment:
      - MYSQL_ROOT_USER=root
      - MYSQL_ROOT_PASSWORD=topsecret
    ports:
      - 3306:3306
    volumes:
      - ./init/init.sql:/docker-entrypoint-initdb.d/1-init.sql
    networks:
      - app-tier

  storage:
    depends_on:
      - kafka
      - mysql
    build:
      context: ./services/storage
    image: storage
    restart: on-failure
    deploy:
      mode: replicated
      replicas:
        2
    environment:
      KAFKA_HOST: kafka
      MYSQL_HOST: mysql
    networks:
      - app-tier

networks:
  app-tier:
    driver: bridge